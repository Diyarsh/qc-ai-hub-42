import { useState, useEffect } from "react";
import { Send, Plus, Mic, User, Bot } from "lucide-react";
import { QazCloudLogo } from "@/components/ui/qazcloud-logo";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { ScrollArea } from "@/components/ui/scroll-area";
import { ChatMessage } from "@/types/chat";

interface ChatMainProps {
  userName?: string;
  onViewCatalog?: () => void;
  currentSessionId?: string | null;
  messages?: ChatMessage[];
  onSendMessage?: (message: string, isUser?: boolean) => void;
}

export const ChatMain = ({ userName, onViewCatalog, currentSessionId, messages = [], onSendMessage }: ChatMainProps) => {
  const [message, setMessage] = useState("");
  const [activeTab, setActiveTab] = useState<"welcome" | "myProjects" | "newProject">("welcome");

  const sampleQuestions = [
    "–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—É—é –º–æ–¥–µ–ª—å –ò–ò –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–≥–æ–≤–æ—Ä–æ–≤?",
    "–ö–∞–∫–∏–µ –º–æ–¥–µ–ª–∏ –ª—É—á—à–µ –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏?", 
    "–ö–∞–∫ –æ–±–µ—Å–ø–µ—á–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ò–ò-–º–æ–¥–µ–ª—è–º–∏?",
    "–ö–∞–∫–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –µ—Å—Ç—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —á–µ—Ä–µ–∑ –ò–ò?"
  ];

  const myProjects = [
    { id: 1, name: "–í–æ–ø—Ä–æ—Å—ã –ø–æ –¥–æ–≥–æ–≤–æ—Ä—É —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º", type: "document", lastModified: "2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥" },
    { id: 2, name: "–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–æ IaaS", type: "presentation", lastModified: "1 –¥–µ–Ω—å –Ω–∞–∑–∞–¥" },
    { id: 3, name: "–ü—Ä–æ—Ç–æ–∫–æ–ª—ã –≤—Å—Ç—Ä–µ—á", type: "meeting", lastModified: "3 –¥–Ω—è –Ω–∞–∑–∞–¥" },
    { id: 4, name: "–ê–Ω–∞–ª–∏–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π", type: "analysis", lastModified: "5 –¥–Ω–µ–π –Ω–∞–∑–∞–¥" },
    { id: 5, name: "–ß–∞—Ç —Å –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º", type: "chat", lastModified: "1 –Ω–µ–¥–µ–ª—è –Ω–∞–∑–∞–¥" }
  ];

  const availableModels = [
    {
      name: "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç",
      provider: "QazCloud AI-HUB",
      description: "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á, –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤.",
      badge: "–†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø"
    },
    {
      name: "QazLLM-Ultra", 
      provider: "QazCloud AI-HUB",
      description: "–°—É–≤–µ—Ä–µ–Ω–Ω–∞—è –±–æ–ª—å—à–∞—è —è–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ —Å–µ–∫—Ç–æ—Ä–∞. –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.",
      badge: "–ü–û–ü–£–õ–Ø–†–ù–û–ï"
    },
    {
      name: "SecurityGuard AI",
      provider: "QazCloud AI-HUB",
      description: "–ú–æ–¥–µ–ª—å –¥–ª—è –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —É–≥—Ä–æ–∑. –ê–Ω–∞–ª–∏–∑ —Å–µ—Ç–µ–≤–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞, –¥–µ—Ç–µ–∫—Ü–∏—è –∞–Ω–æ–º–∞–ª–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.", 
      badge: "–ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨"
    }
  ];

  const handleSendMessage = () => {
    if (message.trim() && onSendMessage) {
      onSendMessage(message.trim(), true); // true –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      setMessage("");
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  // –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –ò–ò
  const simulateAIResponse = (userMessage: string): string => {
    const responses = [
      `–ü–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å "${userMessage}". –≠—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –∑–∞–¥–∞—á–∞! 

–î–∞–≤–∞–π—Ç–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–¥—Ö–æ–¥–æ–≤ –∫ –µ—ë —Ä–µ—à–µ–Ω–∏—é:

1. **–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞**: –°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∞—à–µ–π –∑–∞–¥–∞—á–∏
2. **–í—ã–±–æ—Ä –ø–æ–¥—Ö–æ–¥—è—â–µ–π –º–æ–¥–µ–ª–∏**: –í —Ä–∞–º–∫–∞—Ö QC AI-HUB —É –Ω–∞—Å –µ—Å—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á
3. **–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è**: –Ø –º–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω –≤–Ω–µ–¥—Ä–µ–Ω–∏—è

–ö–∞–∫–æ–π –∏–∑ –∞—Å–ø–µ–∫—Ç–æ–≤ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?`,

      `–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å –ø—Ä–æ "${userMessage}". –Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å —ç—Ç–∏–º. 

**–ú–æ–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**

‚Ä¢ **QazLLM-Ultra** - –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
‚Ä¢ **SecurityGuard AI** - –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é
‚Ä¢ **DocAnalyzer AI** - –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏

–í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ø–µ—Ü–∏—Ñ–∏–∫–∏ –≤–∞—à–µ–π –∑–∞–¥–∞—á–∏, —è –º–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –±–æ–ª—å—à–µ –æ –≤–∞—à–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è—Ö?`,

      `–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –ö–∞—Å–∞—Ç–µ–ª—å–Ω–æ "${userMessage}" - —ç—Ç–æ –≤–∞–∂–Ω–∞—è —Ç–µ–º–∞ –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º –º–∏—Ä–µ –ò–ò. 

**–ö–ª—é—á–µ–≤—ã–µ –∞—Å–ø–µ–∫—Ç—ã:**

üîç **–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö**: –í–∞–∂–Ω–æ –ø–æ–Ω–∏–º–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ –∫–∞—á–µ—Å—Ç–≤–æ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
üéØ **–í—ã–±–æ—Ä –∞–ª–≥–æ—Ä–∏—Ç–º–∞**: –†–∞–∑–Ω—ã–µ –∑–∞–¥–∞—á–∏ —Ç—Ä–µ–±—É—é—Ç —Ä–∞–∑–Ω—ã—Ö –ø–æ–¥—Ö–æ–¥–æ–≤
‚ö° **–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å**: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
üõ°Ô∏è **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å**: –û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –∑–∞—â–∏—Ç—ã –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö

–ü–æ–∑–≤–æ–ª—å—Ç–µ –æ–±—ä—è—Å–Ω–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –∫–∞–∂–¥—ã–π –∏–∑ —ç—Ç–∏—Ö –∞—Å–ø–µ–∫—Ç–æ–≤ –ø—Ä–∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω–æ –∫ –≤–∞—à–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏.`,

      `–Ø –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –∑–∞–ø—Ä–æ—Å "${userMessage}". –û—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –∏–º–µ—é—â–∏—Ö—Å—è –¥–∞–Ω–Ω—ã—Ö, –º–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Ä–µ—à–µ–Ω–∏–µ:

**–≠—Ç–∞–ø 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞**
- –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
- –í—ã–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã

**–≠—Ç–∞–ø 2: –†–µ–∞–ª–∏–∑–∞—Ü–∏—è** 
- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –ò–ò
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏

**–≠—Ç–∞–ø 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ**
- –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
- –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

–•–æ—Ç–µ–ª–∏ –±—ã —É–≥–ª—É–±–∏—Ç—å—Å—è –≤ –∫–∞–∫–æ–π-—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —ç—Ç–∞–ø?`,

      `–í–∞—à –≤–æ–ø—Ä–æ—Å –æ "${userMessage}" –∞–∫—Ç—É–∞–ª–µ–Ω. –í —Ä–∞–º–∫–∞—Ö QC AI-HUB –º—ã –º–æ–∂–µ–º –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ—à–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏:

üí° **–ì–æ—Ç–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è**: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—à –∫–∞—Ç–∞–ª–æ–≥ –≥–æ—Ç–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π
üîß **–ö–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è**: –ê–¥–∞–ø—Ç–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–æ–¥–µ–ª–µ–π –ø–æ–¥ –≤–∞—à–∏ –Ω—É–∂–¥—ã  
üöÄ **–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å –Ω—É–ª—è**: –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è
üìä **–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏**: –≠–∫—Å–ø–µ—Ä—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–∞ –≤—Å–µ—Ö —ç—Ç–∞–ø–∞—Ö

–ö–∞–∫–æ–π –ø–æ–¥—Ö–æ–¥ –≤–∞–º –±–æ–ª—å—à–µ –ø–æ–¥—Ö–æ–¥–∏—Ç? –Ø –º–æ–≥—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ª—é–±–æ–º—É –∏–∑ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π.`
    ];
    return responses[Math.floor(Math.random() * responses.length)];
  };

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–º—É–ª—è—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –ò–ò  
  useEffect(() => {
    if (messages.length > 0 && messages[messages.length - 1].isUser && onSendMessage) {
      const lastUserMessage = messages[messages.length - 1];
      const timer = setTimeout(() => {
        const aiResponse = simulateAIResponse(lastUserMessage.content);
        onSendMessage(aiResponse, false); // false –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ò–ò
      }, 1000 + Math.random() * 2000); // –ó–∞–¥–µ—Ä–∂–∫–∞ 1-3 —Å–µ–∫—É–Ω–¥—ã

      return () => clearTimeout(timer);
    }
  }, [messages, onSendMessage]);

  const handleSampleQuestion = (question: string) => {
    if (onSendMessage) {
      onSendMessage(question, true);
    }
  };

  const handleCreateProject = (modelName: string) => {
    // Logic for creating new project with selected model
    console.log(`Creating new project with model: ${modelName}`);
  };

  return (
    <div className="flex-1 flex flex-col h-screen bg-background">
      {messages.length === 0 ? (
        // Welcome Screen –∫–æ–≥–¥–∞ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
        <div className="flex-1 flex flex-col px-8 py-12">
          <div className="max-w-6xl w-full mx-auto space-y-8">
            {/* Welcome Message & Navigation */}
            <div className="text-center space-y-6">
              <h1 className="text-4xl font-bold text-foreground">
                –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å {userName || "–†–æ–º–∞–Ω"}!
              </h1>
              
              {/* Navigation Tabs */}
              <div className="flex justify-center space-x-2 bg-muted p-2 rounded-xl max-w-md mx-auto">
                <Button
                  variant={activeTab === "welcome" ? "default" : "ghost"}
                  onClick={() => setActiveTab("welcome")}
                  className="flex-1"
                >
                  –ì–ª–∞–≤–Ω–∞—è
                </Button>
                <Button
                  variant={activeTab === "myProjects" ? "default" : "ghost"}
                  onClick={() => setActiveTab("myProjects")}
                  className="flex-1"
                >
                  –ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã
                </Button>
                <Button
                  variant={activeTab === "newProject" ? "default" : "ghost"}
                  onClick={() => setActiveTab("newProject")}
                  className="flex-1"
                >
                  –ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç
                </Button>
              </div>
            </div>

            {/* Content based on active tab */}
            {activeTab === "welcome" && (
              <div className="space-y-8">
                {/* Chat Input */}
                <div className="relative max-w-2xl mx-auto">
                  <div className="flex items-center space-x-2 p-4 bg-card border border-border rounded-2xl shadow-sm">
                    <Input
                      placeholder="–ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å"
                      value={message}
                      onChange={(e) => setMessage(e.target.value)}
                      onKeyPress={handleKeyPress}
                      className="flex-1 border-0 bg-transparent focus-visible:ring-0 text-base placeholder:text-muted-foreground"
                    />
                    <div className="flex items-center space-x-2">
                      <Button
                        size="sm"
                        variant="ghost"
                        className="h-8 w-8 p-0 text-muted-foreground hover:text-foreground"
                      >
                        <Plus className="h-4 w-4" />
                      </Button>
                      <Button
                        size="sm"
                        variant="ghost"
                        className="h-8 w-8 p-0 text-muted-foreground hover:text-foreground"
                      >
                        <Mic className="h-4 w-4" />
                      </Button>
                      <Button
                        size="sm"
                        onClick={handleSendMessage}
                        disabled={!message.trim()}
                        className="h-8 w-8 p-0 bg-ai-primary hover:bg-ai-primary/90 text-white"
                      >
                        <Send className="h-4 w-4" />
                      </Button>
                    </div>
                  </div>
                </div>

                {/* Sample Questions */}
                <div className="space-y-4">
                  <h3 className="text-lg font-semibold text-foreground text-center">
                    –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
                  </h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-3 max-w-4xl mx-auto">
                    {sampleQuestions.map((question, index) => (
                      <Button
                        key={index}
                        variant="outline"
                        onClick={() => handleSampleQuestion(question)}
                        className="h-auto p-4 text-left justify-start hover:bg-ai-primary/5 hover:border-ai-primary/30"
                      >
                        <div className="text-sm leading-relaxed">{question}</div>
                      </Button>
                    ))}
                  </div>
                </div>

                {/* Recommended Models */}
                <div className="space-y-6">
                  <div className="flex items-center justify-between">
                    <h2 className="text-xl font-semibold text-foreground">–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –º–æ–¥–µ–ª–∏</h2>
                    <Button 
                      variant="link" 
                      className="text-ai-primary hover:text-ai-primary/80 p-0"
                      onClick={onViewCatalog}
                    >
                      –°–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ
                    </Button>
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                    {availableModels.slice(0, 3).map((model, index) => (
                      <Card key={index} className="group cursor-pointer hover:shadow-md transition-all duration-200 border-border hover:border-ai-primary/30">
                        <CardHeader className="space-y-3">
                          <div className="flex items-start justify-between">
                             <div className="p-2 bg-gradient-primary rounded-lg">
                               <QazCloudLogo className="h-5 w-5" />
                             </div>
                            {model.badge && (
                              <Badge variant="secondary" className="bg-ai-primary/10 text-ai-primary border-ai-primary/20">
                                {model.badge}
                              </Badge>
                            )}
                          </div>
                          <div>
                            <CardTitle className="text-lg group-hover:text-ai-primary transition-colors">
                              {model.name}
                            </CardTitle>
                            <p className="text-sm text-muted-foreground">{model.provider}</p>
                          </div>
                        </CardHeader>
                        <CardContent>
                          <CardDescription className="text-sm leading-relaxed">
                            {model.description}
                          </CardDescription>
                        </CardContent>
                      </Card>
                    ))}
                  </div>
                </div>
              </div>
            )}

            {activeTab === "myProjects" && (
              <div className="space-y-6">
                <h2 className="text-2xl font-semibold text-foreground text-center">–ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã</h2>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                  {myProjects.map((project) => (
                    <Card key={project.id} className="group cursor-pointer hover:shadow-md transition-all duration-200 border-border hover:border-ai-primary/30">
                      <CardHeader>
                        <div className="flex items-start justify-between">
                          <CardTitle className="text-lg group-hover:text-ai-primary transition-colors line-clamp-2">
                            {project.name}
                          </CardTitle>
                          <Button variant="ghost" size="sm" className="opacity-0 group-hover:opacity-100 transition-opacity">
                            –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å
                          </Button>
                        </div>
                        <p className="text-sm text-muted-foreground capitalize">{project.type}</p>
                      </CardHeader>
                      <CardContent>
                        <p className="text-xs text-muted-foreground">
                          –ò–∑–º–µ–Ω–µ–Ω–æ: {project.lastModified}
                        </p>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              </div>
            )}

            {activeTab === "newProject" && (
              <div className="space-y-6">
                <h2 className="text-2xl font-semibold text-foreground text-center">–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç</h2>
                <div className="space-y-4">
                  <h3 className="text-lg font-semibold text-foreground text-center">
                    –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å
                  </h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                    {availableModels.map((model, index) => (
                      <Card 
                        key={index} 
                        className="group cursor-pointer hover:shadow-md transition-all duration-200 border-border hover:border-ai-primary/30"
                        onClick={() => handleCreateProject(model.name)}
                      >
                        <CardHeader className="space-y-3">
                          <div className="flex items-start justify-between">
                             <div className="p-2 bg-gradient-primary rounded-lg">
                               <QazCloudLogo className="h-5 w-5" />
                             </div>
                            {model.badge && (
                              <Badge variant="secondary" className="bg-ai-primary/10 text-ai-primary border-ai-primary/20">
                                {model.badge}
                              </Badge>
                            )}
                          </div>
                          <div>
                            <CardTitle className="text-lg group-hover:text-ai-primary transition-colors">
                              {model.name}
                            </CardTitle>
                            <p className="text-sm text-muted-foreground">{model.provider}</p>
                          </div>
                        </CardHeader>
                        <CardContent>
                          <CardDescription className="text-sm leading-relaxed mb-4">
                            {model.description}
                          </CardDescription>
                          <Button className="w-full bg-ai-primary hover:bg-ai-primary/90">
                            –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç
                          </Button>
                        </CardContent>
                      </Card>
                    ))}
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>
      ) : (
        // Chat View –∫–æ–≥–¥–∞ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
        <div className="flex-1 flex flex-col">
          {/* Messages Area */}
          <ScrollArea className="flex-1 p-4">
            <div className="max-w-4xl mx-auto space-y-4">
              {messages.map((msg) => (
                <div key={msg.id} className={`flex gap-3 ${msg.isUser ? 'justify-end' : 'justify-start'}`}>
                  {!msg.isUser && (
                    <div className="p-2 bg-gradient-primary rounded-lg">
                      <Bot className="h-5 w-5 text-white" />
                    </div>
                  )}
                  <div className={`max-w-2xl ${msg.isUser ? 'bg-ai-primary text-white' : 'bg-card border'} rounded-lg p-4`}>
                    <p className="text-sm leading-relaxed">{msg.content}</p>
                    <p className={`text-xs mt-2 ${msg.isUser ? 'text-white/70' : 'text-muted-foreground'}`}>
                      {msg.timestamp.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })}
                    </p>
                  </div>
                  {msg.isUser && (
                    <div className="p-2 bg-gradient-secondary rounded-lg">
                      <User className="h-5 w-5 text-white" />
                    </div>
                  )}
                </div>
              ))}
            </div>
          </ScrollArea>

          {/* Chat Input - Fixed at bottom */}
          <div className="border-t bg-background p-4">
            <div className="max-w-4xl mx-auto">
              <div className="flex items-center space-x-2 p-4 bg-card border border-border rounded-2xl shadow-sm">
                <Input
                  placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
                  value={message}
                  onChange={(e) => setMessage(e.target.value)}
                  onKeyPress={handleKeyPress}
                  className="flex-1 border-0 bg-transparent focus-visible:ring-0 text-base placeholder:text-muted-foreground"
                />
                <div className="flex items-center space-x-2">
                  <Button
                    size="sm"
                    variant="ghost"
                    className="h-8 w-8 p-0 text-muted-foreground hover:text-foreground"
                  >
                    <Plus className="h-4 w-4" />
                  </Button>
                  <Button
                    size="sm"
                    variant="ghost"
                    className="h-8 w-8 p-0 text-muted-foreground hover:text-foreground"
                  >
                    <Mic className="h-4 w-4" />
                  </Button>
                  <Button
                    size="sm"
                    onClick={handleSendMessage}
                    disabled={!message.trim()}
                    className="h-8 w-8 p-0 bg-ai-primary hover:bg-ai-primary/90 text-white"
                  >
                    <Send className="h-4 w-4" />
                  </Button>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};